<?php

/**
 * BaseAssetTriggerMeasurementConfig
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $asset_trigger_measurement_config_id
 * @property integer $asset_type_id
 * @property integer $measure_unit_id
 * @property integer $mtn_plan_id
 * @property integer $asset_trigger_measurement_config_start
 * @property integer $asset_trigger_measurement_config_end
 * @property integer $asset_trigger_measurement_tolerance
 * @property integer $asset_trigger_measurement_config_notificacion_method
 * @property string $asset_trigger_measurement_config_notificacion_mails
 * @property AssetType $AssetType
 * @property MeasureUnit $MeasureUnit
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseAssetTriggerMeasurementConfig extends Doctrine_Record {

    public function setTableDefinition() {
        $this->setTableName('asset_trigger_measurement_config');
        $this->hasColumn('asset_trigger_measurement_config_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('asset_type_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('measure_unit_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('mtn_plan_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('asset_trigger_measurement_config_start', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('asset_trigger_measurement_config_end', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('asset_trigger_measurement_tolerance', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('asset_trigger_measurement_config_notificacion_method', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('asset_trigger_measurement_config_notificacion_mails', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }
    public function setUp() {
        parent::setUp();
        $this->hasOne('AssetType', array(
             'local' => 'asset_type_id',
             'foreign' => 'asset_type_id'));

        $this->hasOne('MeasureUnit', array(
             'local' => 'measure_unit_id',
             'foreign' => 'measure_unit_id'));
    }
}
