<?php

/**
 * BaseDocDocument
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $doc_document_id
 * @property integer $node_id
 * @property integer $doc_category_id
 * @property integer $doc_extension_id
 * @property string $doc_document_filename
 * @property string $doc_document_description
 * @property timestamp $doc_document_creation
 * @property integer $doc_current_version_id
 * @property integer $doc_status_id
 * @property Doctrine_Collection $Node
 * @property DocCategory $DocCategory
 * @property DocExtension $DocExtension
 * @property Doctrine_Collection $DocVersion
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseDocDocument extends Doctrine_Record {

    public function setTableDefinition() {
        $this->setTableName('doc_document');
        $this->hasColumn('doc_document_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('node_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('doc_category_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('doc_extension_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('doc_document_filename', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('doc_document_description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('doc_document_creation', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('doc_current_version_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('doc_status_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }
    public function setUp() {
        parent::setUp();
        $this->hasMany('Node', array(
             'local' => 'doc_document_id',
             'foreign' => 'node_document_id_default'));

        $this->hasOne('DocCategory', array(
             'local' => 'doc_category_id',
             'foreign' => 'doc_category_id'));

        $this->hasOne('DocExtension', array(
             'local' => 'doc_extension_id',
             'foreign' => 'doc_extension_id'));

        $this->hasMany('DocVersion', array(
             'local' => 'doc_document_id',
             'foreign' => 'doc_document_id'));
    }
}
