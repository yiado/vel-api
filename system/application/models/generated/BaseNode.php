<?php

/**
 * BaseNode
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $node_id
 * @property integer $node_type_id
 * @property integer $node_parent_id
 * @property string $node_name
 * @property integer $lft
 * @property integer $rgt
 * @property integer $level
 * @property integer $node_document_id_default
 * @property Doctrine_Collection $DocDocument
 * @property NodeType $NodeType
 * @property Doctrine_Collection $Node
 * @property Doctrine_Collection $Asset
 * @property Doctrine_Collection $AssetInventory
 * @property Doctrine_Collection $ContractNode
 * @property Doctrine_Collection $Costs
 * @property Doctrine_Collection $InfraCoordinate
 * @property Doctrine_Collection $InfraInfo
 * @property Doctrine_Collection $InfraOtherDataValue
 * @property Doctrine_Collection $MtnPercentages
 * @property Doctrine_Collection $MtnWorkOrder
 * @property Doctrine_Collection $Plan
 * @property Doctrine_Collection $PlanNode
 * @property Doctrine_Collection $Request
 * @property Doctrine_Collection $UserGroupNode
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseNode extends Doctrine_Record {

    public function setTableDefinition() {
        $this->setTableName('node');
        $this->hasColumn('node_id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => true,
            'autoincrement' => true,
        ));
        $this->hasColumn('node_type_id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('node_parent_id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('node_name', 'string', 100, array(
            'type' => 'string',
            'length' => 100,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('lft', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('rgt', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('level', 'integer', 2, array(
            'type' => 'integer',
            'length' => 2,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('node_document_id_default', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
    }

    public function setUp() {
        parent::setUp();
        $this->hasMany('Solicitud', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));
        
        $this->hasMany('DocDocument', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasOne('NodeType', array(
            'local' => 'node_type_id',
            'foreign' => 'node_type_id'));

        $this->hasMany('Node', array(
            'local' => 'node_id',
            'foreign' => 'node_parent_id'));

        $this->hasMany('Asset', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('AssetInventory', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('ContractNode', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('Costs', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('InfraCoordinate', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('InfraInfo', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('InfraOtherDataValue', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('MtnPercentages', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('MtnWorkOrder', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('Plan', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('PlanNode', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('Request', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('UserGroupNode', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('MtnNodeWorkOrder', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $this->hasMany('GroupAssetNode', array(
            'local' => 'node_id',
            'foreign' => 'node_id'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
            'hasManyRoots' => true,
            'rootColumnName' => 'node_parent_id',
        ));
        $this->actAs($nestedset0);

        loadListeners($this, 'Node');
    }

}
