<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $user_name
 * @property string $user_username
 * @property string $user_password
 * @property string $user_email
 * @property string $user_type
 * @property integer $language_id
 * @property date $user_expiration
 * @property integer $user_status
 * @property integer $user_tree_full
 * @property integer $user_default_module
 * @property integer $user_preference
 * @property integer $user_path
 * @property Language $Language
 * @property Doctrine_Collection $AssetDocument
 * @property Doctrine_Collection $AssetInventory
 * @property Doctrine_Collection $AssetLoad
 * @property Doctrine_Collection $DocVersion
 * @property Doctrine_Collection $Log
 * @property Doctrine_Collection $MtnStatusLog
 * @property Doctrine_Collection $MtnWorkOrder
 * @property Doctrine_Collection $Plan
 * @property Doctrine_Collection $Request
 * @property Doctrine_Collection $Solicitud
 * @property Doctrine_Collection $SolicitudLog
 * @property Doctrine_Collection $UserGroupUser
 * @property Doctrine_Collection $UserProvider
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseUser extends Doctrine_Record {

    public function setTableDefinition() {
        $this->setTableName('user');
        $this->hasColumn('user_id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => true,
            'autoincrement' => true,
        ));
        $this->hasColumn('user_name', 'string', 150, array(
            'type' => 'string',
            'length' => 150,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_username', 'string', 30, array(
            'type' => 'string',
            'length' => 30,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_password', 'string', 200, array(
            'type' => 'string',
            'length' => 200,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_email', 'string', 100, array(
            'type' => 'string',
            'length' => 100,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_type', 'string', 10, array(
            'type' => 'string',
            'length' => 10,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('language_id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_expiration', 'date', null, array(
            'type' => 'date',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_status', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_tree_full', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_default_module', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_preference', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'default' => '1',
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_path', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('user_token', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
    }

    public function setUp() {
        parent::setUp();
        $this->hasOne('Language', array(
            'local' => 'language_id',
            'foreign' => 'language_id'));

        $this->hasMany('AssetDocument', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('AssetInventory', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('AssetLoad', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('DocVersion', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('Log', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('MtnStatusLog', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('MtnWorkOrder', array(
            'local' => 'user_id',
            'foreign' => 'mtn_work_order_creator_id'));

        $this->hasMany('Plan', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('Request', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('Solicitud', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('SolicitudLog', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('UserGroupUser', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('UserProvider', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('Service', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('ServiceLog', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));

        $this->hasMany('ServiceType', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));
        
        $this->hasMany('RdiAdmin', array(
            'local' => 'user_id',
            'foreign' => 'user_id'));
    }

}
